
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a0  080002a0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a0  080002a0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080002a0  080002a0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a0  080002a0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a0  080002a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002a4  080002a4  000012a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080002a8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002ac  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002ac  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c07  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000047a  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000030b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012c  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001527b  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f26  00000000  00000000  00018607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b16d  00000000  00000000  0001a52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009569a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e4  00000000  00000000  000956e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00095bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000288 	.word	0x08000288

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000288 	.word	0x08000288

0800014c <main>:
#include "main.h"

int main()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//enable RCC. APBENR
	RCC->APB2ENR=(1<<2); // (Activation Action << Bit No.) bit wise
 8000150:	4b04      	ldr	r3, [pc, #16]	@ (8000164 <main+0x18>)
 8000152:	2204      	movs	r2, #4
 8000154:	619a      	str	r2, [r3, #24]
	//CONf. port (I/P / O/P).
	GPIOA->CRL=(3<<4); // (ACTION CONf.[CONf. 00, Mode 11] << BIT No.) bit wise
 8000156:	4b04      	ldr	r3, [pc, #16]	@ (8000168 <main+0x1c>)
 8000158:	2230      	movs	r2, #48	@ 0x30
 800015a:	601a      	str	r2, [r3, #0]

	while(1)
	{
		//SET PINS
		GPIOA->ODR=(1<<1); //pin is ON one to one
 800015c:	4b02      	ldr	r3, [pc, #8]	@ (8000168 <main+0x1c>)
 800015e:	2202      	movs	r2, #2
 8000160:	60da      	str	r2, [r3, #12]
 8000162:	e7fb      	b.n	800015c <main+0x10>
 8000164:	40021000 	.word	0x40021000
 8000168:	40010800 	.word	0x40010800

0800016c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000170:	bf00      	nop
 8000172:	e7fd      	b.n	8000170 <NMI_Handler+0x4>

08000174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000178:	bf00      	nop
 800017a:	e7fd      	b.n	8000178 <HardFault_Handler+0x4>

0800017c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000180:	bf00      	nop
 8000182:	e7fd      	b.n	8000180 <MemManage_Handler+0x4>

08000184 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000188:	bf00      	nop
 800018a:	e7fd      	b.n	8000188 <BusFault_Handler+0x4>

0800018c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000190:	bf00      	nop
 8000192:	e7fd      	b.n	8000190 <UsageFault_Handler+0x4>

08000194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001bc:	f000 f82e 	bl	800021c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001d0:	f7ff fff8 	bl	80001c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d4:	480b      	ldr	r0, [pc, #44]	@ (8000204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001d6:	490c      	ldr	r1, [pc, #48]	@ (8000208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001d8:	4a0c      	ldr	r2, [pc, #48]	@ (800020c <LoopFillZerobss+0x16>)
  movs r3, #0
 80001da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001dc:	e002      	b.n	80001e4 <LoopCopyDataInit>

080001de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e2:	3304      	adds	r3, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e8:	d3f9      	bcc.n	80001de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ea:	4a09      	ldr	r2, [pc, #36]	@ (8000210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001ec:	4c09      	ldr	r4, [pc, #36]	@ (8000214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f0:	e001      	b.n	80001f6 <LoopFillZerobss>

080001f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f4:	3204      	adds	r2, #4

080001f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f8:	d3fb      	bcc.n	80001f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001fa:	f000 f821 	bl	8000240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fe:	f7ff ffa5 	bl	800014c <main>
  bx lr
 8000202:	4770      	bx	lr
  ldr r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000208:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800020c:	080002a8 	.word	0x080002a8
  ldr r2, =_sbss
 8000210:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000214:	20000024 	.word	0x20000024

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <HAL_IncTick+0x1c>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	461a      	mov	r2, r3
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <HAL_IncTick+0x20>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4413      	add	r3, r2
 800022c:	4a03      	ldr	r2, [pc, #12]	@ (800023c <HAL_IncTick+0x20>)
 800022e:	6013      	str	r3, [r2, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000000 	.word	0x20000000
 800023c:	20000020 	.word	0x20000020

08000240 <__libc_init_array>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	2600      	movs	r6, #0
 8000244:	4d0c      	ldr	r5, [pc, #48]	@ (8000278 <__libc_init_array+0x38>)
 8000246:	4c0d      	ldr	r4, [pc, #52]	@ (800027c <__libc_init_array+0x3c>)
 8000248:	1b64      	subs	r4, r4, r5
 800024a:	10a4      	asrs	r4, r4, #2
 800024c:	42a6      	cmp	r6, r4
 800024e:	d109      	bne.n	8000264 <__libc_init_array+0x24>
 8000250:	f000 f81a 	bl	8000288 <_init>
 8000254:	2600      	movs	r6, #0
 8000256:	4d0a      	ldr	r5, [pc, #40]	@ (8000280 <__libc_init_array+0x40>)
 8000258:	4c0a      	ldr	r4, [pc, #40]	@ (8000284 <__libc_init_array+0x44>)
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	10a4      	asrs	r4, r4, #2
 800025e:	42a6      	cmp	r6, r4
 8000260:	d105      	bne.n	800026e <__libc_init_array+0x2e>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	f855 3b04 	ldr.w	r3, [r5], #4
 8000268:	4798      	blx	r3
 800026a:	3601      	adds	r6, #1
 800026c:	e7ee      	b.n	800024c <__libc_init_array+0xc>
 800026e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000272:	4798      	blx	r3
 8000274:	3601      	adds	r6, #1
 8000276:	e7f2      	b.n	800025e <__libc_init_array+0x1e>
 8000278:	080002a0 	.word	0x080002a0
 800027c:	080002a0 	.word	0x080002a0
 8000280:	080002a0 	.word	0x080002a0
 8000284:	080002a4 	.word	0x080002a4

08000288 <_init>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	bf00      	nop
 800028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028e:	bc08      	pop	{r3}
 8000290:	469e      	mov	lr, r3
 8000292:	4770      	bx	lr

08000294 <_fini>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	bf00      	nop
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr
