
Session42.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b8  080002c0  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b8  080002b8  000012c0  2**0
                  CONTENTS
  4 .ARM          00000000  080002b8  080002b8  000012c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b8  080002c0  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b8  080002b8  000012b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002bc  080002bc  000012bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080002c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002c0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004b2  00000000  00000000  000012e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025f  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000052  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f47  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ed0  00000000  00000000  00016a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aa91  00000000  00000000  000178e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009237a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  000923c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000924b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080002a0 	.word	0x080002a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080002a0 	.word	0x080002a0

0800014c <SysTick_Handler>:

//INTERRUPT Handler (don't have to write it in stm32f1xx_it.c) okay if it's deleted or delete
//or delete void SysTick_handler() function;
//written in c not c++ may cause errors so it better be removed
void SysTick_Handler() //from startup>>startup_stm32f103c8tx000.s
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//do something every 1ms..
	if(ticks!=0)
 8000150:	4b06      	ldr	r3, [pc, #24]	@ (800016c <SysTick_Handler+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d004      	beq.n	8000162 <SysTick_Handler+0x16>
	{
		ticks--;
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <SysTick_Handler+0x20>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a03      	ldr	r2, [pc, #12]	@ (800016c <SysTick_Handler+0x20>)
 8000160:	6013      	str	r3, [r2, #0]
	}
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	2000001c 	.word	0x2000001c

08000170 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	ticks = ms;
 8000178:	4a06      	ldr	r2, [pc, #24]	@ (8000194 <delay_ms+0x24>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
	while(ticks);
 800017e:	bf00      	nop
 8000180:	4b04      	ldr	r3, [pc, #16]	@ (8000194 <delay_ms+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fb      	bne.n	8000180 <delay_ms+0x10>
}
 8000188:	bf00      	nop
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	2000001c 	.word	0x2000001c

08000198 <main>:


int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	//Config ports and pins
	RCC->APB2ENR |= (1<<4); // Enable GPIOC
 800019c:	4b15      	ldr	r3, [pc, #84]	@ (80001f4 <main+0x5c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a14      	ldr	r2, [pc, #80]	@ (80001f4 <main+0x5c>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6193      	str	r3, [r2, #24]
	GPIOC->CRH=0x33333333;
 80001a8:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <main+0x60>)
 80001aa:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80001ae:	605a      	str	r2, [r3, #4]

	//** As long as the CPU is On SysTick is On as well no need for RCC Enable **

	//SysTick Config. for 1ms
	SysTick->CTRL =(1<<1) |(1<<2);
 80001b0:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <main+0x64>)
 80001b2:	2206      	movs	r2, #6
 80001b4:	601a      	str	r2, [r3, #0]
	//SysTick->LOAD =8000 -1; // Flag Operation takes 1 tick so -1 is set so that flag is the last tick
	SysTick->LOAD =(OSC/msec)-1;
 80001b6:	4b11      	ldr	r3, [pc, #68]	@ (80001fc <main+0x64>)
 80001b8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80001bc:	605a      	str	r2, [r3, #4]
	SysTick->CTRL |=(1<<0); // enable at last as a safety pattern
 80001be:	4b0f      	ldr	r3, [pc, #60]	@ (80001fc <main+0x64>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a0e      	ldr	r2, [pc, #56]	@ (80001fc <main+0x64>)
 80001c4:	f043 0301 	orr.w	r3, r3, #1
 80001c8:	6013      	str	r3, [r2, #0]
		/*//Polling
		while(!(SysTick->CTRL &(1<<16)));
		//do somthing
		*/

		GPIOC->ODR &=~(1<<13);//Led_off();
 80001ca:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <main+0x60>)
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	4a0a      	ldr	r2, [pc, #40]	@ (80001f8 <main+0x60>)
 80001d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80001d4:	60d3      	str	r3, [r2, #12]
		delay_ms(100);
 80001d6:	2064      	movs	r0, #100	@ 0x64
 80001d8:	f7ff ffca 	bl	8000170 <delay_ms>
		GPIOC->ODR |=(1<<13);//Led_on();
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <main+0x60>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a05      	ldr	r2, [pc, #20]	@ (80001f8 <main+0x60>)
 80001e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001e6:	60d3      	str	r3, [r2, #12]
		delay_ms(100);
 80001e8:	2064      	movs	r0, #100	@ 0x64
 80001ea:	f7ff ffc1 	bl	8000170 <delay_ms>
		GPIOC->ODR &=~(1<<13);//Led_off();
 80001ee:	bf00      	nop
 80001f0:	e7eb      	b.n	80001ca <main+0x32>
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000
 80001fc:	e000e010 	.word	0xe000e010

08000200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800020c:	f7ff fff8 	bl	8000200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000210:	480b      	ldr	r0, [pc, #44]	@ (8000240 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000212:	490c      	ldr	r1, [pc, #48]	@ (8000244 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000218:	e002      	b.n	8000220 <LoopCopyDataInit>

0800021a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800021c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021e:	3304      	adds	r3, #4

08000220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000224:	d3f9      	bcc.n	800021a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000226:	4a09      	ldr	r2, [pc, #36]	@ (800024c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000228:	4c09      	ldr	r4, [pc, #36]	@ (8000250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800022c:	e001      	b.n	8000232 <LoopFillZerobss>

0800022e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000230:	3204      	adds	r2, #4

08000232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000234:	d3fb      	bcc.n	800022e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000236:	f000 f80f 	bl	8000258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023a:	f7ff ffad 	bl	8000198 <main>
  bx lr
 800023e:	4770      	bx	lr
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	080002c0 	.word	0x080002c0
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	20000020 	.word	0x20000020

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>
	...

08000258 <__libc_init_array>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	2600      	movs	r6, #0
 800025c:	4d0c      	ldr	r5, [pc, #48]	@ (8000290 <__libc_init_array+0x38>)
 800025e:	4c0d      	ldr	r4, [pc, #52]	@ (8000294 <__libc_init_array+0x3c>)
 8000260:	1b64      	subs	r4, r4, r5
 8000262:	10a4      	asrs	r4, r4, #2
 8000264:	42a6      	cmp	r6, r4
 8000266:	d109      	bne.n	800027c <__libc_init_array+0x24>
 8000268:	f000 f81a 	bl	80002a0 <_init>
 800026c:	2600      	movs	r6, #0
 800026e:	4d0a      	ldr	r5, [pc, #40]	@ (8000298 <__libc_init_array+0x40>)
 8000270:	4c0a      	ldr	r4, [pc, #40]	@ (800029c <__libc_init_array+0x44>)
 8000272:	1b64      	subs	r4, r4, r5
 8000274:	10a4      	asrs	r4, r4, #2
 8000276:	42a6      	cmp	r6, r4
 8000278:	d105      	bne.n	8000286 <__libc_init_array+0x2e>
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000280:	4798      	blx	r3
 8000282:	3601      	adds	r6, #1
 8000284:	e7ee      	b.n	8000264 <__libc_init_array+0xc>
 8000286:	f855 3b04 	ldr.w	r3, [r5], #4
 800028a:	4798      	blx	r3
 800028c:	3601      	adds	r6, #1
 800028e:	e7f2      	b.n	8000276 <__libc_init_array+0x1e>
 8000290:	080002b8 	.word	0x080002b8
 8000294:	080002b8 	.word	0x080002b8
 8000298:	080002b8 	.word	0x080002b8
 800029c:	080002bc 	.word	0x080002bc

080002a0 <_init>:
 80002a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a2:	bf00      	nop
 80002a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a6:	bc08      	pop	{r3}
 80002a8:	469e      	mov	lr, r3
 80002aa:	4770      	bx	lr

080002ac <_fini>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	bf00      	nop
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr
